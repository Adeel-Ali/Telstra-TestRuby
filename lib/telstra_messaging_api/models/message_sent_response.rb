# telstra_messaging_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module TelstraMessagingApi
  # MessageSentResponse Model.
  class MessageSentResponse < BaseModel
    # An array of messages.
    # @return [List of Message]
    attr_accessor :messages

    # An array of the countries to which the destination MSISDNs belong.
    # @return [List of Object]
    attr_accessor :country

    # This returns whether the message sent was a SMS or MMS.
    # @return [String]
    attr_accessor :message_type

    # For SMS messages only, the value indicates the number of 160 character
    # message segments sent.
    # @return [Integer]
    attr_accessor :number_segments

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['messages'] = 'messages'
      @_hash['country'] = 'Country'
      @_hash['message_type'] = 'messageType'
      @_hash['number_segments'] = 'numberSegments'
      @_hash
    end

    def initialize(messages = nil,
                   message_type = nil,
                   number_segments = nil,
                   country = nil)
      @messages = messages
      @country = country
      @message_type = message_type
      @number_segments = number_segments
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      # Parameter is an array, so we need to iterate through it
      messages = nil
      unless hash['messages'].nil?
        messages = []
        hash['messages'].each do |structure|
          messages << (Message.from_hash(structure) if structure)
        end
      end
      message_type = hash['messageType']
      number_segments = hash['numberSegments']
      country = hash['Country']

      # Create object from extracted values.
      MessageSentResponse.new(messages,
                              message_type,
                              number_segments,
                              country)
    end
  end
end
