# telstra_messaging_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module TelstraMessagingApi
  # Message Model.
  class Message < BaseModel
    # Just a copy of the number the message is sent to.
    # @return [String]
    attr_accessor :to

    # Gives an indication if the message has been accepted for delivery. The
    # description field contains information on why a message may have been
    # rejected.
    # @return [String]
    attr_accessor :delivery_status

    # For an accepted message, ths will be a unique reference that can be used
    # to check the messages status. Please refer to the Delivery Notification
    # section.
    # Note that `messageId` will be different for each number that the message
    # was sent to.
    # @return [String]
    attr_accessor :message_id

    # For an accepted message, ths will be the URL that can be used to check the
    # messages status. Please refer to the Delivery Notification section.
    # @return [String]
    attr_accessor :message_status_url

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['to'] = 'to'
      @_hash['delivery_status'] = 'deliveryStatus'
      @_hash['message_id'] = 'messageId'
      @_hash['message_status_url'] = 'messageStatusURL'
      @_hash
    end

    def initialize(to = nil,
                   delivery_status = nil,
                   message_id = nil,
                   message_status_url = nil)
      @to = to
      @delivery_status = delivery_status
      @message_id = message_id
      @message_status_url = message_status_url
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      to = hash['to']
      delivery_status = hash['deliveryStatus']
      message_id = hash['messageId']
      message_status_url = hash['messageStatusURL']

      # Create object from extracted values.
      Message.new(to,
                  delivery_status,
                  message_id,
                  message_status_url)
    end
  end
end
