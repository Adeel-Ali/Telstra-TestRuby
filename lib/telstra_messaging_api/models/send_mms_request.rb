# telstra_messaging_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module TelstraMessagingApi
  # SendMMSRequest Model.
  class SendMMSRequest < BaseModel
    # This will be the source address that will be displayed on the receiving
    # device. If it is not present then it will default to the MSISDN assigned
    # to the app. If replyRequest is set to true, then this field will be
    # ignored.
    # @return [String]
    attr_accessor :from

    # This is the destination address.
    # Can be an array of strings if sending to multiple numbers:
    # "to":["+61412345678", "+61418765432"]
    # @return [String]
    attr_accessor :to

    # The subject that will be used in an MMS message.
    # @return [String]
    attr_accessor :subject

    # If set to true, the reply message functionality will be implemented and
    # the to address will be ignored if present.
    # @return [Boolean]
    attr_accessor :reply_request

    # Notify url
    # @return [String]
    attr_accessor :notify_url

    # An array of content that will be sent in an MMS message. If this array is
    # present it will cause the `body` element to be ignored, and the message
    # will be sent as an MMS.
    # @return [List of MMSContent]
    attr_accessor :mms_content

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['from'] = 'from'
      @_hash['to'] = 'to'
      @_hash['subject'] = 'subject'
      @_hash['reply_request'] = 'replyRequest'
      @_hash['notify_url'] = 'notifyURL'
      @_hash['mms_content'] = 'MMSContent'
      @_hash
    end

    def initialize(from = nil,
                   to = nil,
                   subject = nil,
                   reply_request = nil,
                   mms_content = nil,
                   notify_url = nil)
      @from = from
      @to = to
      @subject = subject
      @reply_request = reply_request
      @notify_url = notify_url
      @mms_content = mms_content
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      from = hash['from']
      to = hash['to']
      subject = hash['subject']
      reply_request = hash['replyRequest']
      # Parameter is an array, so we need to iterate through it
      mms_content = nil
      unless hash['MMSContent'].nil?
        mms_content = []
        hash['MMSContent'].each do |structure|
          mms_content << (MMSContent.from_hash(structure) if structure)
        end
      end
      notify_url = hash['notifyURL']

      # Create object from extracted values.
      SendMMSRequest.new(from,
                         to,
                         subject,
                         reply_request,
                         mms_content,
                         notify_url)
    end
  end
end
