# telstra_messaging_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module TelstraMessagingApi
  # SendSMSRequest Model.
  class SendSMSRequest < BaseModel
    # Phone number (in E.164 format) to send the SMS to.
    # This number can be in international format `"to": "+61412345678"` or in
    # national format.
    # Can be an array of strings if sending to multiple numbers:
    # `"to":["+61412345678", "+61418765432"]`
    # @return [String]
    attr_accessor :to

    # The text body of the message. Messages longer than 160 characters will be
    # counted as multiple messages.
    # This field contains the message text, this can be up to 1900 (for a single
    # recipient) or 500 (for multiple recipients) UTF-8 characters. As mobile
    # devices rarely support the full range of UTF-8 characters, it is possible
    # that some characters may not be translated correctly by the mobile device
    # @return [String]
    attr_accessor :body

    # The Alphanumeric sender ID of up to 11 characters or phone number the SMS
    # was sent from. If not present, the service will use the mobile number
    # associated with the application (in E.164 format).
    # This feature is only available on paid plans.
    # @return [String]
    attr_accessor :from

    # How long the platform should attempt to deliver the message for.
    # This period is specified in minutes from the message.
    # Normally if the message cannot be delivered immediately, it will be stored
    # and delivery will be periodically reattempted. The network will attempt to
    # send the message for up to seven days. It is possible to define a period
    # smaller than 7 days by including this parameter and specifying the number
    # of minutes that delivery should be attempted. eg: including `"validity":
    # 60` will specify that if a message can't be delivered within the first 60
    # minutes them the network should stop.
    # @return [Integer]
    attr_accessor :validity

    # How long the platform should wait before attempting to send the message -
    # specified in minutes.
    # e.g.: If `"scheduledDelivery": 120` is included, then the network will not
    # attempt to start message delivery for two hours after the message has been
    # submitted
    # @return [Integer]
    attr_accessor :scheduled_delivery

    # Contains a URL that will be called once your message has been processed.
    # The status may be delivered, expired, deleted, etc.
    # It is possible for the network to make a call to a URL when the message
    # has been delivered (or has expired), different URLs can be set per
    # message. Please refer to the Delivery Notification section.
    # @return [String]
    attr_accessor :notify_url

    # If set to true, the reply message functionality will be implemented and
    # the to address will be ignored if present. If false or not present, then
    # normal message handling is implemented.
    # When set to true, network will use a temporary number to deliver this
    # message. All messages sent by mobile to this temporary number will be
    # stored against the same `messageId`. If a `notifyURL` is provided then
    # user response will be delivered to the URL where `messageId` will be same
    # as `messageId` in reponse to original API request.
    # This field contains the message text, this can be up to 500 UTF-8
    # characters. As mobile devices rarely support the full range of UTF-8
    # characters, it is possible that some characters may not be translated
    # correctly by the mobile device.
    # @return [Boolean]
    attr_accessor :reply_request

    # When messages are queued up for a number, then it is possible to set where
    # a new message will be placed in the queue. If the priority is set to true
    # then the new message will be placed ahead of all messages with a normal
    # priority. If there are no messages queued for the number, then this
    # parameter has no effect.
    # @return [Boolean]
    attr_accessor :priority

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['to'] = 'to'
      @_hash['body'] = 'body'
      @_hash['from'] = 'from'
      @_hash['validity'] = 'validity'
      @_hash['scheduled_delivery'] = 'scheduledDelivery'
      @_hash['notify_url'] = 'notifyURL'
      @_hash['reply_request'] = 'replyRequest'
      @_hash['priority'] = 'priority'
      @_hash
    end

    def initialize(to = nil,
                   body = nil,
                   from = nil,
                   validity = nil,
                   scheduled_delivery = nil,
                   notify_url = nil,
                   reply_request = nil,
                   priority = nil)
      @to = to
      @body = body
      @from = from
      @validity = validity
      @scheduled_delivery = scheduled_delivery
      @notify_url = notify_url
      @reply_request = reply_request
      @priority = priority
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      to = hash['to']
      body = hash['body']
      from = hash['from']
      validity = hash['validity']
      scheduled_delivery = hash['scheduledDelivery']
      notify_url = hash['notifyURL']
      reply_request = hash['replyRequest']
      priority = hash['priority']

      # Create object from extracted values.
      SendSMSRequest.new(to,
                         body,
                         from,
                         validity,
                         scheduled_delivery,
                         notify_url,
                         reply_request,
                         priority)
    end
  end
end
