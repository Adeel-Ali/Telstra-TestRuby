# telstra_messaging_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module TelstraMessagingApi
  # ProvisioningController
  class ProvisioningController < BaseController
    @instance = ProvisioningController.new

    class << self
      attr_accessor :instance
    end

    def instance
      self.class.instance
    end

    # Invoke the provisioning API to get a dedicated mobile number for an
    # account or application.
    # Note that Free Trial apps will have a 30-Day Limit for their provisioned
    # number. If the Provisioning call is made several times within that 30-Day
    # period, it will return the `expiryDate` in the Unix format and will not
    # add any activeDays until after that `expiryDate`.
    # For paid apps, a provisioned number can be allotted for a maximum of 5
    # years. If a Provisioning call is made which will result to activeDays >
    # 1830, the response body will indicate that the provisioned number is
    # already valid for more than 5 years.
    # @param [ProvisionNumberRequest] body Required parameter: A JSON payload
    # containing the required attributes
    # @return ProvisionNumberResponse response from the API call
    def create_subscription(body)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/messages/provisioning/subscriptions'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      OAuth2.apply(_request)
      _context = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _context.response.status_code == 400
        raise APIException.new(
          'Invalid or missing request parameters',
          _context
        )
      elsif _context.response.status_code == 401
        raise APIException.new(
          'Invalid access token. Please try with a valid token',
          _context
        )
      elsif _context.response.status_code == 403
        raise APIException.new(
          'Authorization credentials passed and accepted but account does' \
          ' not have permission  SpikeArrest-The API call rate' \
          ' limit has been exceeded',
          _context
        )
      elsif _context.response.status_code == 404
        raise APIException.new(
          'The requested URI does not exist  RESOURCE-NOT-FOUND ',
          _context
        )
      elsif _context.response.status_code == 500
        raise APIException.new(
          'Technical error : Unable to route the message to a Target' \
          ' Endpoint : An error has occurred while processing your' \
          ' request, please refer to API Docs for summary on the' \
          ' issue ',
          _context
        )
      end
      unless _context.response.status_code.between?(200, 208)
        raise APIException.new(
          'An internal error occurred when processing the request',
          _context
        )
      end
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      ProvisionNumberResponse.from_hash(decoded)
    end

    # Get mobile number subscription for an account
    # @return ProvisionNumberResponse1 response from the API call
    def get_subscription
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/messages/provisioning/subscriptions'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.get(
        _query_url,
        headers: _headers
      )
      OAuth2.apply(_request)
      _context = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _context.response.status_code == 400
        raise APIException.new(
          'Invalid or missing request parameters',
          _context
        )
      elsif _context.response.status_code == 401
        raise APIException.new(
          'Invalid access token. Please try with a valid token',
          _context
        )
      elsif _context.response.status_code == 403
        raise APIException.new(
          'Authorization credentials passed and accepted but account does' \
          ' not have permission  SpikeArrest-The API call rate' \
          ' limit has been exceeded',
          _context
        )
      elsif _context.response.status_code == 404
        raise APIException.new(
          'The requested URI does not exist  RESOURCE-NOT-FOUND',
          _context
        )
      elsif _context.response.status_code == 500
        raise APIException.new(
          'Technical error : Unable to route the message to a Target' \
          ' Endpoint : An error has occurred while processing your' \
          ' request, please refer to API Docs for summary on the' \
          ' issue',
          _context
        )
      end
      unless _context.response.status_code.between?(200, 208)
        raise APIException.new(
          'An internal error occurred when processing the request',
          _context
        )
      end
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      ProvisionNumberResponse1.from_hash(decoded)
    end

    # Delete a mobile number subscription from an account
    # @param [DeleteNumberRequest] body Required parameter: EmptyArr
    # @return void response from the API call
    def delete_subscription(body)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/messages/provisioning/subscriptions'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.delete(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      OAuth2.apply(_request)
      _context = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _context.response.status_code == 400
        raise APIException.new(
          'Invalid or missing request parameters',
          _context
        )
      elsif _context.response.status_code == 401
        raise APIException.new(
          'Invalid access token. Please try with a valid token',
          _context
        )
      elsif _context.response.status_code == 403
        raise APIException.new(
          'Authorization credentials passed and accepted but account does' \
          ' not have permission  SpikeArrest-The API call rate' \
          ' limit has been exceeded',
          _context
        )
      elsif _context.response.status_code == 404
        raise APIException.new(
          'The requested URI does not exist  RESOURCE-NOT-FOUND',
          _context
        )
      elsif _context.response.status_code == 500
        raise APIException.new(
          'Technical error : Unable to route the message to a Target' \
          ' Endpoint : An error has occurred while processing your' \
          ' request, please refer to API Docs for summary on the' \
          ' issue',
          _context
        )
      end
      unless _context.response.status_code.between?(200, 208)
        raise APIException.new(
          'An internal error occurred when processing the request',
          _context
        )
      end
      validate_response(_context)
    end
  end
end
