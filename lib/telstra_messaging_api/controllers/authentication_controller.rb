# telstra_messaging_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module TelstraMessagingApi
  # AuthenticationController
  class AuthenticationController < BaseController
    @instance = AuthenticationController.new

    class << self
      attr_accessor :instance
    end

    def instance
      self.class.instance
    end

    # To generate an OAuth2 Authentication token, pass through your `Client key`
    # and `Client secret` that you received when you registered for the **API
    # Free Trial** Product.
    # The grant_type should be left as `client_credentials` and the scope as
    # `NSMS`.
    # The token will expire in one hour.
    # @param [String] client_id Required parameter: Example:
    # @param [String] client_secret Required parameter: Example:
    # @param [String] grant_type Required parameter:
    # Example:client_credentials
    # @return OAuthResponse response from the API call
    def create_auth_token(client_id,
                          client_secret,
                          grant_type)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/oauth/token'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare form parameters.
      _parameters = {
        'client_id' => client_id,
        'client_secret' => client_secret,
        'grant_type' => grant_type
      }
      _parameters = APIHelper.form_encode_parameters(_parameters)

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: _parameters
      )
      OAuth2.apply(_request)
      _context = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _context.response.status_code == 400
        raise APIException.new(
          'unsupported_grant_type',
          _context
        )
      elsif _context.response.status_code == 401
        raise APIException.new(
          'invalid_client',
          _context
        )
      elsif _context.response.status_code == 404
        raise APIException.new(
          'The requested URI does not exist',
          _context
        )
      elsif _context.response.status_code == 503
        raise APIException.new(
          'The service requested is currently unavailable',
          _context
        )
      end
      unless _context.response.status_code.between?(200, 208)
        raise APIException.new(
          'An internal error occurred when processing the request',
          _context
        )
      end
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      OAuthResponse.from_hash(decoded)
    end
  end
end
